syntax = "proto3"; // we use proto version 3
package interface;   // similar to namespace, avoid conflicts

service RPC { 
    rpc ping(Empty) returns (Empty) {};
    rpc init_session(InitSessionRequest) returns (Empty) {};
    rpc keep_alive(KeepAliveRequest) returns (KeepAliveResponse) {};
    rpc open_lock(OpenLockRequest) returns (Empty) {};
    rpc delete_lock(DeleteLockRequest) returns (Empty) {};
    rpc acquire_lock(AcquireLockRequest) returns (AcquireLockResponse) {};
    rpc release_lock(ReleaseLockRequest) returns (Empty) {};
    rpc read(ReadRequest) returns (ReadResponse) {};
    rpc write(WriteRequest) returns (WriteResponse) {};

    // TODO: interface for user using lock service
    // aquire lock 
    // commands for fs changes 
    // release lock
    // extend lock session
}

enum LockStatus {
  EXCLUSIVE = 0;
  SHARED = 1;
  FREE = 2;
}

message Empty {
}

message InitSessionRequest {
  string client_id = 1;
}

message KeepAliveRequest{
  string client_id = 1;
  map<string, LockStatus> locks = 2;
}

message KeepAliveResponse{
  int64 lease_duration = 1;
}

message OpenLockRequest {
  string client_id = 1;
  string file_path = 2;
}

message DeleteLockRequest {
  string client_id = 1;
  string file_path = 2;
}

message AcquireLockRequest {
  string client_id = 1;
  string file_path = 2;
  LockStatus mode = 3;
}

message AcquireLockResponse {
}

message ReleaseLockRequest {
  string client_id = 1;
  string file_path = 2;
}

message ReadRequest {
  string client_id = 1;
  string file_path = 2;
}

message ReadResponse {
  string content = 1;
}

message WriteRequest {
  string client_id = 1;
  string file_path = 2;
  string content = 3;
}

message WriteResponse {
  bool success = 1;
}